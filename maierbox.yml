Parameters:
  DBAdminUsername:
    Type: String
    Default: admin
Resources:
  ECSService:
    Type: AWS::ECS::Service
    Properties: {}
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions: 
        - DisableNetworking: false
          Environment: 
            - Name: MYSQL_HOST
              Value:
                Fn::GetAtt: DBCluster.Endpoint.Address
            - Name: MYSQL_PORT
              Value:
                Fn::GetAtt: DBCluster.Endpoint.Port
          Essential: true
          HealthCheck: 
              Command: 
                - "CMD-SHELL, curl -f http://localhost:8000 || exit 1"
          Hostname: maierbox
          Image:
            Fn::Sub: '${MaierBoxRepo.RepositoryUri}/maierbox:latest'
          Interactive: false
          MountPoints: 
            - ContainerPath: /opt/maierbox/static
              ReadOnly: false
              SourceVolume: static
            - ContainerPath: /opt/maierbox/media
              ReadOnly: false
              SourceVolume: media
          Name: maierbox
          Privileged: false
          ReadonlyRootFilesystem: true
          Secrets: 
            - Name: MYSQL_USER
              ValueFrom: 
                Fn::Sub: "${DBAdmin}:SecretString:username"
            - Name: MYSQL_PASS
              ValueFrom:
                Fn::Sub: "${DBAdmin}:SecretString:password"
            - Name: MAIERBOX_SECRET
              ValueFrom: !Ref MaierBoxSecret
        - DependsOn:
            - Condition: HEALTHY
              ContainerName: maierbox
          DisableNetworking: false
          Essential: true
          HealthCheck: 
              Command: 
                - "CMD-SHELL, curl -f http://localhost/ || exit 1"
          Hostname: nginx
          Image:
            Fn::Sub: '${NGINXRepo.RepositoryUri}/nginx:latest'
          Interactive: false
          MountPoints: 
            - ContainerPath: /mnt/static
              ReadOnly: false
              SourceVolume: static
            - ContainerPath: /mnt/media
              ReadOnly: false
              SourceVolume: media
          Name: nginx
          PortMappings:
            - AppProtocol: http
              ContainerPort: 80
              HostPort: 80
              Protocol: tcp
          Privileged: false
          ReadonlyRootFilesystem: true
      Cpu: 512
      Memory: 2048
      NetworkMode: awsvpc
      PidMode: task
      RequiresCompatibilities: 
        - FARGATE
      RuntimePlatform: 
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX
      Volumes: 
        - ConfiguredAtLaunch: false
          EFSVolumeConfiguration:
              FilesystemId: !Ref ElasticFileSystem
              RootDirectory: '/static/'
              TransitEncryption: DISABLED
          Name: static
        - ConfiguredAtLaunch: false
          EFSVolumeConfiguration:
              FilesystemId: !Ref ElasticFileSystem
              RootDirectory: '/media/'
              TransitEncryption: DISABLED
          Name: media
  MaierBoxRepo:
    Type: AWS::ECR::Repository
    Properties:
      EmptyOnDelete: true
      ImageTagMutability: MUTABLE
      RepositoryName: maierbox
  NGINXRepo:
    Type: AWS::ECR::Repository
    Properties:
      EmptyOnDelete: true
      ImageTagMutability: MUTABLE
      RepositoryName: nginx
  MaierBoxSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: SECRET_KEY for MaierBox/Django
      GenerateSecretString:
        PasswordLength: 64
        RequireEachIncludedType: true
      Name: MaierBoxSecret
  DBAdmin:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Credentials for the Admin User of the MaierBox DB
      GenerateSecretString:
        ExcludePunctuation: true
        GenerateStringKey: password
        PasswordLength: 32
        RequireEachIncludedType: true
        SecretStringTemplate: !Sub '{"username": "${DBAdminUsername}"}'
      Name: MaierBoxDBAdmin
  DBCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DBClusterIdentifier: MaierBoxDB
      DeletionProtection: true
      EnableHttpEndpoint: false
      Engine: aurora-mysql
      EngineMode: provisioned
      EngineVersion: 8.0.mysql_aurora.3.07.1
      MasterUsername:
        Fn::Sub: "{{resolve:secretsmanager:${DBAdmin}::username}}"
      MasterUserPassword:
        Fn::Sub: "{{resolve:secretsmanager:${DBAdmin}::password}}"
      ServerlessV2ScalingConfiguration: 
          MaxCapacity: 1
          MinCapacity: 0.5
  DBInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      Engine: aurora-mysql
      DBInstanceClass: db.serverless
      DBClusterIdentifier: !Ref DBCluster
  ElasticFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      BackupPolicy: 
        Status: ENABLED
      Encrypted: false
      FileSystemProtection: 
        ReplicationOverwriteProtection: ENABLED
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: {}
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: <String>
      DefaultActions:
        - Type: <String>
  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: <String>
      DefaultActions:
        - Type: <String>
  ListenerCertificate:
    Type: AWS::ElasticLoadBalancingV2::ListenerCertificate
    Properties:
      Certificates:
        - {}
      ListenerArn: <String>

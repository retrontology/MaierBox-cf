Parameters:
  DBAdminUsername:
    Type: String
    Description: Username for the admin DB user
    Default: admin
  VPCID:
    Type: AWS::EC2::VPC::Id
    Description: ID of the VPC in which you want to place this maierbox instance
  PrivateSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of Subnet IDs for the private subnets
  PublicSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of Subnet IDs for the public subnets
  SSLCertificate:
    Type: String
    Description: ARN of the SSL Certificate to use for the HTTPS Listener within the Load Balancer
Resources:
  MaierBoxContainerLog:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupClass: STANDARD
      LogGroupName: '/ecs/maierbox'
  NGINXContainerLog:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupClass: STANDARD
      LogGroupName: '/ecs/nginx'
  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: maierbox-execution
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
      Policies:
        - PolicyName: MaierBoxSecrets
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: !Ref MaierBoxSecret
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: !Ref DBAdmin
              - Effect: Allow
                Action:
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                Resource:
                  Fn::GetAtt: NGINXRepo.Arn
              - Effect: Allow
                Action:
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                Resource:
                  Fn::GetAtt: MaierBoxRepo.Arn
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: maierbox-task
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: MaierBoxSecrets
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: !Ref MaierBoxSecret
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: !Ref DBAdmin
              - Effect: Allow
                Action:
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                Resource:
                  Fn::GetAtt: NGINXRepo.Arn
              - Effect: Allow
                Action:
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                Resource:
                  Fn::GetAtt: MaierBoxRepo.Arn
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the MaierBox containers running on ECS
      GroupName: maierbox
      VpcId: !Ref VPCID
  ECSSGIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allows MaierBox Load Balancer to access the containers
      FromPort: 80
      GroupId: !Ref ECSSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ECSSecurityGroup
      ToPort: 80
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: HTTPSListener
    Properties:
      Cluster: !Ref ECSCluster
      DeploymentController: 
        Type: ECS
      DesiredCount: 1
      EnableExecuteCommand: false
      LaunchType: FARGATE
      LoadBalancers: 
        - ContainerName: nginx
          ContainerPort: 80
          TargetGroupArn: !Ref ECSTargetGroup
      NetworkConfiguration: 
        AwsvpcConfiguration: 
            AssignPublicIp: DISABLED
            SecurityGroups: 
              - !Ref ECSSecurityGroup
            Subnets: !Ref PrivateSubnets
      PlatformVersion: LATEST
      SchedulingStrategy: REPLICA
      ServiceConnectConfiguration: 
        Enabled: false
      ServiceName: maierbox
      TaskDefinition: !Ref ECSTaskDefinition
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders: 
        - FARGATE
      ClusterName: maierbox
      ClusterSettings: 
        - Name: containerInsights
          Value: disabled
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions: 
        - DisableNetworking: false
          Environment: 
            - Name: MAIERBOX_PROD
              Value: 1
            - Name: MYSQL_HOST
              Value:
                Fn::GetAtt: DBCluster.Endpoint.Address
            - Name: MYSQL_PORT
              Value:
                Fn::GetAtt: DBCluster.Endpoint.Port
          Essential: true
          HealthCheck: 
              Command: 
                - "CMD-SHELL, curl -f http://localhost:8000 || exit 1"
          Image:
            Fn::Sub: '${MaierBoxRepo.RepositoryUri}:latest'
          Interactive: false
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref MaierBoxContainerLog
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          MountPoints: 
            - ContainerPath: /opt/maierbox/static
              ReadOnly: false
              SourceVolume: static
            - ContainerPath: /opt/maierbox/media
              ReadOnly: false
              SourceVolume: media
          Name: maierbox
          Privileged: false
          ReadonlyRootFilesystem: true
          Secrets: 
            - Name: MYSQL_CREDENTIALS
              ValueFrom: !Ref DBAdmin
            - Name: MAIERBOX_SECRET
              ValueFrom: !Ref MaierBoxSecret
        - DependsOn:
            - Condition: HEALTHY
              ContainerName: maierbox
          DisableNetworking: false
          Essential: true
          HealthCheck: 
              Command: 
                - "CMD-SHELL, curl -f http://localhost/ || exit 1"
          Image:
            Fn::Sub: '${NGINXRepo.RepositoryUri}:latest'
          Interactive: false
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref NGINXContainerLog
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          MountPoints: 
            - ContainerPath: /mnt/static
              ReadOnly: false
              SourceVolume: static
            - ContainerPath: /mnt/media
              ReadOnly: false
              SourceVolume: media
          Name: nginx
          PortMappings:
            - AppProtocol: http
              ContainerPort: 80
              HostPort: 80
              Protocol: tcp
          Privileged: false
          ReadonlyRootFilesystem: true
          VolumesFrom:
            - ReadOnly: true
              SourceContainer: maierbox
      Cpu: 512
      ExecutionRoleArn: !Ref ECSExecutionRole
      Memory: 2GB
      NetworkMode: awsvpc
      PidMode: task
      RequiresCompatibilities: 
        - FARGATE
      RuntimePlatform: 
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX
      TaskRoleArn: !Ref ECSTaskRole
      Volumes: 
        - Name: static
        - ConfiguredAtLaunch: false
          EFSVolumeConfiguration:
              FilesystemId: !Ref ElasticFileSystem
              RootDirectory: '/'
              TransitEncryption: DISABLED
          Name: media
  MaierBoxRepo:
    Type: AWS::ECR::Repository
    Properties:
      EmptyOnDelete: true
      ImageTagMutability: MUTABLE
      RepositoryName: maierbox
  NGINXRepo:
    Type: AWS::ECR::Repository
    Properties:
      EmptyOnDelete: true
      ImageTagMutability: MUTABLE
      RepositoryName: nginx
  MaierBoxSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: SECRET_KEY for MaierBox/Django
      GenerateSecretString:
        PasswordLength: 64
        RequireEachIncludedType: true
      Name: MaierBoxSecret
  DBAdmin:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Credentials for the Admin User of the MaierBox DB
      GenerateSecretString:
        ExcludePunctuation: true
        GenerateStringKey: password
        PasswordLength: 32
        RequireEachIncludedType: true
        SecretStringTemplate: !Sub '{"username": "${DBAdminUsername}"}'
      Name: MaierBoxDBAdmin
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for the MaierBox DB
      DBSubnetGroupName: maierbox-db
      SubnetIds: !Ref PrivateSubnets
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the MaierBox DB
      GroupName: maierbox-db
      VpcId: !Ref VPCID
  DBSGIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allows MaierBox containers to access the DB
      FromPort:
        Fn::GetAtt: DBCluster.Endpoint.Port
      GroupId: !Ref DBSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ECSSecurityGroup
      ToPort:
        Fn::GetAtt: DBCluster.Endpoint.Port
  DBCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DBClusterIdentifier: MaierBoxDB
      DBSubnetGroupName: !Ref DBSubnetGroup
      DeletionProtection: false
      EnableHttpEndpoint: false
      Engine: aurora-mysql
      EngineMode: provisioned
      EngineVersion: 8.0.mysql_aurora.3.07.1
      MasterUsername:
        Fn::Sub: "{{resolve:secretsmanager:${DBAdmin}::username}}"
      MasterUserPassword:
        Fn::Sub: "{{resolve:secretsmanager:${DBAdmin}::password}}"
      ServerlessV2ScalingConfiguration: 
          MaxCapacity: 1
          MinCapacity: 0.5
      VpcSecurityGroupIds:
        - !Ref DBSecurityGroup
  DBInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      Engine: aurora-mysql
      DBInstanceClass: db.serverless
      DBClusterIdentifier: !Ref DBCluster
  ElasticFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      BackupPolicy: 
        Status: ENABLED
      Encrypted: false
      FileSystemProtection: 
        ReplicationOverwriteProtection: ENABLED
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the MaierBox loadbalancer
      GroupName: maierbox-lb
      VpcId: !Ref VPCID
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: maierbox-lb
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref LBSecurityGroup
      Subnets: !Ref PublicSubnets
      Type: application
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: "HTTPS"
            Port: 443
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
      Port: 80
      Protocol: "HTTP"
  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref SSLCertificate
      LoadBalancerArn: !Ref LoadBalancer
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ECSTargetGroup
      Port: 443
      Protocol: "HTTPS"
  ECSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      Name: maierbox
      Port: 80
      Protocol: HTTP
      ProtocolVersion: HTTP1
      TargetType: ip
      VpcId: !Ref VPCID
